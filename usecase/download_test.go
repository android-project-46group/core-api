package usecase_test

import (
	"archive/zip"
	"bytes"
	"context"
	"encoding/json"
	"io"
	"testing"

	"github.com/android-project-46group/core-api/model"
	"github.com/android-project-46group/core-api/repository"
	"github.com/android-project-46group/core-api/usecase"
	"github.com/android-project-46group/core-api/util/logger"
	"github.com/stretchr/testify/assert"
)

//nolint:funlen
func TestDownloadMembersZip(t *testing.T) {
	t.Parallel()

	//nolint:lll
	imgBinary := []byte{137, 80, 78, 71, 13, 10, 26, 10, 0, 0, 0, 13, 73, 72, 68, 82, 0, 0, 0, 90, 0, 0, 0, 80, 8, 6, 0, 0, 0, 153, 51, 98, 100, 0, 0, 1, 62, 105, 67, 67, 80, 73, 67, 67, 32, 80, 114, 111, 102, 105, 108, 101, 0, 0, 40, 145, 99, 96, 96, 226, 73, 44, 40, 200, 97, 97, 96, 96, 200, 205, 43, 41, 10, 114, 119, 82, 136, 136, 140, 82, 96, 127, 198, 192, 197, 192, 202, 32, 194, 192, 195, 32, 155, 152, 92, 92, 224, 24, 16, 224, 3, 84, 194, 0, 163, 81, 193, 183, 107, 12, 140, 32, 250, 178, 46, 200, 172, 18, 231, 27, 51, 114, 126, 148, 218, 101, 251, 119, 84, 238, 116, 239, 242, 199, 84, 143, 2, 184, 82, 82, 139, 147, 129, 244, 31, 32, 78, 72, 46, 40, 42, 97, 96, 96, 140, 1, 178, 149, 203, 75, 10, 64, 236, 6, 32, 91, 164, 8, 232, 40, 32, 123, 10, 136, 157, 14, 97, 175, 0, 177, 147, 32, 236, 61, 96, 53, 33, 65, 206, 64, 246, 5, 32, 91, 32, 57, 35, 49, 5, 200, 126, 0, 100, 235, 36, 33, 137, 167, 35, 177, 161, 246, 130, 0, 91, 88, 148, 145, 177, 37, 1, 135, 146, 10, 74, 82, 43, 74, 64, 180, 115, 126, 65, 101, 81, 102, 122, 70, 137, 130, 35, 48, 116, 82, 21, 60, 243, 146, 245, 116, 20, 140, 12, 140, 140, 24, 24, 64, 97, 13, 81, 253, 249, 6, 56, 12, 25, 197, 56, 16, 98, 25, 51, 24, 24, 204, 114, 128, 130, 150, 8, 177, 180, 217, 12, 12, 59, 251, 129, 206, 55, 69, 136, 169, 47, 2, 242, 89, 25, 24, 14, 238, 43, 72, 44, 74, 132, 59, 128, 241, 27, 75, 113, 154, 177, 17, 132, 205, 189, 157, 129, 129, 117, 218, 255, 255, 159, 195, 25, 24, 216, 53, 25, 24, 254, 94, 255, 255, 255, 247, 246, 255, 255, 255, 46, 99, 96, 96, 190, 197, 192, 112, 224, 27, 0, 82, 21, 93, 94, 52, 59, 242, 251, 0, 0, 0, 86, 101, 88, 73, 102, 77, 77, 0, 42, 0, 0, 0, 8, 0, 1, 135, 105, 0, 4, 0, 0, 0, 1, 0, 0, 0, 26, 0, 0, 0, 0, 0, 3, 146, 134, 0, 7, 0, 0, 0, 18, 0, 0, 0, 68, 160, 2, 0, 4, 0, 0, 0, 1, 0, 0, 0, 90, 160, 3, 0, 4, 0, 0, 0, 1, 0, 0, 0, 80, 0, 0, 0, 0, 65, 83, 67, 73, 73, 0, 0, 0, 83, 99, 114, 101, 101, 110, 115, 104, 111, 116, 88, 83, 214, 104, 0, 0, 1, 212, 105, 84, 88, 116, 88, 77, 76, 58, 99, 111, 109, 46, 97, 100, 111, 98, 101, 46, 120, 109, 112, 0, 0, 0, 0, 0, 60, 120, 58, 120, 109, 112, 109, 101, 116, 97, 32, 120, 109, 108, 110, 115, 58, 120, 61, 34, 97, 100, 111, 98, 101, 58, 110, 115, 58, 109, 101, 116, 97, 47, 34, 32, 120, 58, 120, 109, 112, 116, 107, 61, 34, 88, 77, 80, 32, 67, 111, 114, 101, 32, 54, 46, 48, 46, 48, 34, 62, 10, 32, 32, 32, 60, 114, 100, 102, 58, 82, 68, 70, 32, 120, 109, 108, 110, 115, 58, 114, 100, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 47, 49, 57, 57, 57, 47, 48, 50, 47, 50, 50, 45, 114, 100, 102, 45, 115, 121, 110, 116, 97, 120, 45, 110, 115, 35, 34, 62, 10, 32, 32, 32, 32, 32, 32, 60, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 32, 114, 100, 102, 58, 97, 98, 111, 117, 116, 61, 34, 34, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 120, 109, 108, 110, 115, 58, 101, 120, 105, 102, 61, 34, 104, 116, 116, 112, 58, 47, 47, 110, 115, 46, 97, 100, 111, 98, 101, 46, 99, 111, 109, 47, 101, 120, 105, 102, 47, 49, 46, 48, 47, 34, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 101, 120, 105, 102, 58, 80, 105, 120, 101, 108, 89, 68, 105, 109, 101, 110, 115, 105, 111, 110, 62, 56, 48, 60, 47, 101, 120, 105, 102, 58, 80, 105, 120, 101, 108, 89, 68, 105, 109, 101, 110, 115, 105, 111, 110, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 101, 120, 105, 102, 58, 80, 105, 120, 101, 108, 88, 68, 105, 109, 101, 110, 115, 105, 111, 110, 62, 57, 48, 60, 47, 101, 120, 105, 102, 58, 80, 105, 120, 101, 108, 88, 68, 105, 109, 101, 110, 115, 105, 111, 110, 62, 10, 32, 32, 32, 32, 32, 32, 32, 32, 32, 60, 101, 120, 105, 102, 58, 85, 115, 101, 114, 67, 111, 109, 109, 101, 110, 116, 62, 83, 99, 114, 101, 101, 110, 115, 104, 111, 116, 60, 47, 101, 120, 105, 102, 58, 85, 115, 101, 114, 67, 111, 109, 109, 101, 110, 116, 62, 10, 32, 32, 32, 32, 32, 32, 60, 47, 114, 100, 102, 58, 68, 101, 115, 99, 114, 105, 112, 116, 105, 111, 110, 62, 10, 32, 32, 32, 60, 47, 114, 100, 102, 58, 82, 68, 70, 62, 10, 60, 47, 120, 58, 120, 109, 112, 109, 101, 116, 97, 62, 10, 157, 219, 234, 239, 0, 0, 3, 66, 73, 68, 65, 84, 120, 1, 237, 219, 109, 75, 42, 81, 16, 7, 240, 233, 114, 191, 150, 161, 189, 207, 124, 170, 52, 11, 67, 81, 20, 67, 73, 10, 49, 132, 62, 137, 96, 68, 36, 22, 26, 41, 136, 81, 159, 42, 69, 51, 203, 187, 35, 41, 149, 214, 93, 87, 207, 184, 179, 206, 121, 147, 110, 187, 103, 230, 252, 206, 191, 133, 54, 91, 27, 104, 3, 100, 40, 23, 248, 163, 188, 130, 20, 24, 10, 8, 52, 81, 16, 4, 90, 160, 137, 4, 136, 202, 72, 162, 5, 154, 72, 128, 168, 140, 36, 90, 160, 137, 4, 136, 202, 72, 162, 5, 154, 72, 128, 168, 140, 36, 90, 160, 137, 4, 136, 202, 72, 162, 63, 160, 207, 207, 207, 213, 146, 227, 211, 187, 85, 31, 249, 124, 30, 159, 96, 42, 101, 80, 59, 187, 210, 214, 23, 51, 249, 217, 217, 217, 16, 89, 160, 23, 227, 57, 117, 150, 92, 46, 55, 70, 22, 232, 169, 68, 243, 31, 204, 102, 179, 95, 144, 5, 122, 126, 211, 137, 25, 78, 79, 79, 39, 144, 5, 122, 130, 105, 190, 3, 39, 39, 39, 83, 145, 5, 122, 62, 215, 47, 87, 103, 50, 153, 31, 145, 5, 250, 11, 149, 241, 55, 199, 199, 199, 191, 34, 11, 180, 113, 219, 241, 149, 233, 116, 250, 191, 200, 2, 61, 230, 50, 246, 34, 149, 74, 233, 66, 22, 104, 99, 190, 195, 171, 142, 142, 142, 116, 35, 11, 180, 65, 232, 100, 50, 57, 19, 178, 64, 207, 8, 253, 254, 254, 62, 72, 36, 18, 51, 35, 11, 244, 12, 208, 136, 28, 143, 199, 13, 33, 11, 180, 78, 104, 68, 142, 197, 98, 134, 145, 5, 90, 7, 52, 34, 71, 163, 209, 185, 144, 85, 67, 255, 213, 10, 176, 30, 218, 62, 128, 134, 12, 133, 66, 193, 220, 235, 208, 17, 24, 211, 158, 242, 246, 246, 54, 8, 135, 195, 115, 39, 89, 219, 161, 225, 28, 42, 23, 202, 54, 209, 218, 237, 2, 34, 145, 8, 20, 139, 69, 115, 39, 249, 163, 59, 150, 208, 136, 172, 37, 25, 46, 46, 46, 88, 32, 99, 147, 236, 160, 17, 249, 240, 240, 16, 46, 47, 47, 217, 32, 99, 163, 172, 254, 10, 174, 221, 147, 33, 20, 10, 177, 67, 70, 104, 54, 137, 30, 33, 95, 93, 93, 97, 223, 236, 6, 11, 104, 68, 62, 56, 56, 128, 235, 235, 107, 118, 192, 163, 134, 77, 15, 141, 200, 251, 251, 251, 80, 42, 149, 70, 61, 179, 252, 106, 106, 232, 126, 191, 15, 193, 96, 16, 202, 229, 50, 75, 220, 207, 77, 155, 22, 26, 145, 247, 246, 246, 224, 230, 230, 230, 115, 191, 108, 95, 155, 18, 26, 145, 3, 129, 0, 220, 222, 222, 178, 133, 253, 222, 184, 233, 160, 95, 95, 95, 193, 239, 247, 67, 165, 82, 249, 222, 43, 235, 247, 166, 130, 70, 228, 221, 221, 93, 168, 86, 171, 172, 81, 167, 53, 111, 26, 104, 68, 222, 217, 217, 129, 187, 187, 187, 105, 125, 178, 63, 102, 10, 232, 94, 175, 7, 219, 219, 219, 112, 127, 127, 207, 30, 244, 167, 5, 44, 29, 26, 145, 125, 62, 31, 212, 106, 181, 159, 122, 180, 196, 241, 165, 66, 35, 178, 215, 235, 133, 122, 189, 110, 9, 204, 223, 22, 177, 180, 135, 74, 47, 47, 47, 224, 241, 120, 86, 2, 25, 55, 96, 41, 137, 70, 100, 183, 219, 13, 141, 70, 227, 183, 16, 88, 234, 123, 228, 137, 238, 118, 187, 224, 114, 185, 86, 10, 153, 60, 209, 35, 228, 102, 179, 105, 169, 180, 234, 89, 12, 217, 173, 3, 145, 183, 182, 182, 224, 225, 225, 65, 79, 95, 150, 59, 135, 4, 186, 211, 233, 128, 211, 233, 132, 199, 199, 71, 203, 1, 234, 93, 144, 114, 104, 68, 222, 220, 220, 132, 167, 167, 39, 189, 61, 89, 243, 60, 149, 159, 101, 104, 183, 219, 131, 141, 141, 141, 133, 125, 238, 66, 219, 1, 165, 115, 169, 180, 80, 246, 15, 157, 136, 236, 112, 56, 148, 194, 44, 26, 158, 29, 116, 171, 213, 26, 216, 237, 118, 86, 200, 184, 105, 42, 199, 194, 103, 71, 228, 245, 245, 117, 118, 200, 172, 160, 159, 159, 159, 7, 54, 155, 141, 37, 178, 106, 232, 53, 252, 113, 209, 138, 200, 80, 44, 64, 254, 43, 184, 226, 245, 152, 118, 122, 129, 38, 218, 26, 129, 22, 104, 34, 1, 162, 50, 146, 104, 129, 38, 18, 32, 42, 35, 137, 22, 104, 34, 1, 162, 50, 146, 104, 129, 38, 18, 32, 42, 35, 137, 22, 104, 34, 1, 162, 50, 146, 104, 129, 38, 18, 32, 42, 35, 137, 22, 104, 34, 1, 162, 50, 146, 104, 129, 38, 18, 32, 42, 35, 137, 38, 130, 254, 7, 68, 112, 230, 180, 235, 82, 90, 53, 0, 0, 0, 0, 73, 69, 78, 68, 174, 66, 96, 130}
	memberInfos := []*model.Member{
		{
			ID:         1,
			Group:      "nogizaka",
			Name:       "john doe",
			Birthday:   "2004-06-08",
			Height:     160.0,
			BloodType:  "O型",
			Generation: "4期生",
			BlogURL:    "https://test",
			ImgURL:     "https://test.img",
		},
	}

	type fields struct {
		database repository.Database
		remote   repository.Remote
	}

	testCases := []struct {
		name          string
		fields        fields
		checkResponse func(t *testing.T, buffer *bytes.Buffer, err error)
	}{
		{
			name: "success",
			fields: fields{
				database: &mockDatabase{
					ListMembersFunc: func(ctx context.Context) ([]*model.Member, error) {
						return memberInfos, nil
					},
				},
				remote: &mockRemote{
					GetImageFunc: func(ctx context.Context, url string) (io.ReadCloser, error) {
						data := imgBinary

						reader := bytes.NewReader(data)

						return io.NopCloser(reader), nil
					},
				},
			},
			checkResponse: func(t *testing.T, buffer *bytes.Buffer, err error) {
				t.Helper()
				assert.Nil(t, err)

				zipReader, err := zip.NewReader(bytes.NewReader(buffer.Bytes()), int64(len(buffer.Bytes())))
				assert.Nil(t, err)

				assert.Equal(t, 2, len(zipReader.File))

				// 画像ファイル
				imgFile := zipReader.File[0]
				assert.Equal(t, "imgs/test.img", imgFile.FileHeader.Name)
				imgReader, err := imgFile.Open()
				assert.Nil(t, err)

				defer imgReader.Close()
				imgData, _ := io.ReadAll(imgReader)
				// バイナリの比較
				assert.Equal(t, imgBinary, imgData)

				// json ファイル
				jsonFile := zipReader.File[1]
				assert.Equal(t, "members_info.json", jsonFile.FileHeader.Name)
				jsonReader, err := jsonFile.Open()
				assert.Nil(t, err)

				defer jsonReader.Close()
				jsonData, err := io.ReadAll(jsonReader)
				assert.Nil(t, err)
				jsonBinary, err := json.MarshalIndent(memberInfos, "", "  ")
				assert.Nil(t, err)
				// バイナリの比較
				assert.Equal(t, jsonBinary, jsonData)
			},
		},
	}

	for _, tc := range testCases {
		//nolint:varnamelen
		tc := tc

		t.Run(tc.name, func(t *testing.T) {
			t.Parallel()

			// Arrange
			logger := logger.NewMemoryLogger(logger.Info)
			usecase := usecase.New(tc.fields.database, tc.fields.remote, logger)
			buffer := bytes.NewBuffer([]byte{})

			// Act
			err := usecase.DownloadMembersZip(context.Background(), buffer)

			// Assert
			tc.checkResponse(t, buffer, err)
		})
	}
}
